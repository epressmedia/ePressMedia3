#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using ArticleModel;
using SiteModel;
using UserModel;
using AdminModel;
using ForumModel;
using BizModel;
using CalendarModel;
using ClassifiedModel;
using GeoModel;
using UDFModel;
using EmailModel;
using EPM.Data.Model;
using AdModel;
using FormModel;

namespace EPM.Data.Model	
{
	public partial class EPMEntityModel : OpenAccessContext, IEPMEntityModelUnitOfWork
	{
		private static string connectionStringName = @"EPMConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = XmlMetadataSource.FromAssemblyResource("EPMModelEntity.rlinq");
		
		public EPMEntityModel()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public EPMEntityModel(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public EPMEntityModel(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public EPMEntityModel(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public EPMEntityModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<Article> Articles 
		{
			get
			{
				return this.GetAll<Article>();
			}
		}
		
		public IQueryable<ArticleComment> ArticleComments 
		{
			get
			{
				return this.GetAll<ArticleComment>();
			}
		}
		
		public IQueryable<ArticleCategory> ArticleCategories 
		{
			get
			{
				return this.GetAll<ArticleCategory>();
			}
		}
		
		public IQueryable<SiteMenu> SiteMenus 
		{
			get
			{
				return this.GetAll<SiteMenu>();
			}
		}
		
		public IQueryable<MainMenu> MainMenus 
		{
			get
			{
				return this.GetAll<MainMenu>();
			}
		}
		
		public IQueryable<ContentView> ContentViews 
		{
			get
			{
				return this.GetAll<ContentView>();
			}
		}
		
		public IQueryable<ContentType> ContentTypes 
		{
			get
			{
				return this.GetAll<ContentType>();
			}
		}
		
		public IQueryable<Widget_detail> Widget_details 
		{
			get
			{
				return this.GetAll<Widget_detail>();
			}
		}
		
		public IQueryable<Widget> Widgets 
		{
			get
			{
				return this.GetAll<Widget>();
			}
		}
		
		public IQueryable<WidgetType> WidgetTypes 
		{
			get
			{
				return this.GetAll<WidgetType>();
			}
		}
		
		public IQueryable<Users> Users 
		{
			get
			{
				return this.GetAll<Users>();
			}
		}
		
		public IQueryable<UserRoles> UserRoles 
		{
			get
			{
				return this.GetAll<UserRoles>();
			}
		}
		
		public IQueryable<UserProfile> UserProfiles 
		{
			get
			{
				return this.GetAll<UserProfile>();
			}
		}
		
		public IQueryable<UserMembership> UserMemberships 
		{
			get
			{
				return this.GetAll<UserMembership>();
			}
		}
		
		public IQueryable<Application> Applications 
		{
			get
			{
				return this.GetAll<Application>();
			}
		}
		
		public IQueryable<UserRoleMembership> UserRoleMemberships 
		{
			get
			{
				return this.GetAll<UserRoleMembership>();
			}
		}
		
		public IQueryable<AccessControlList> AccessControlLists 
		{
			get
			{
				return this.GetAll<AccessControlList>();
			}
		}
		
		public IQueryable<ForumThread> ForumThreads 
		{
			get
			{
				return this.GetAll<ForumThread>();
			}
		}
		
		public IQueryable<Forum> Forums 
		{
			get
			{
				return this.GetAll<Forum>();
			}
		}
		
		public IQueryable<ForumAttachments> ForumAttachments 
		{
			get
			{
				return this.GetAll<ForumAttachments>();
			}
		}
		
		public IQueryable<ForumConfig> ForumConfigs 
		{
			get
			{
				return this.GetAll<ForumConfig>();
			}
		}
		
		public IQueryable<ForumComment> ForumComments 
		{
			get
			{
				return this.GetAll<ForumComment>();
			}
		}
		
		public IQueryable<SiteSetting> SiteSettings 
		{
			get
			{
				return this.GetAll<SiteSetting>();
			}
		}
		
		public IQueryable<SearchQuery> SearchQueries 
		{
			get
			{
				return this.GetAll<SearchQuery>();
			}
		}
		
		public IQueryable<Subscription> Subscriptions 
		{
			get
			{
				return this.GetAll<Subscription>();
			}
		}
		
		public IQueryable<DailyLogin> DailyLogins 
		{
			get
			{
				return this.GetAll<DailyLogin>();
			}
		}
		
		public IQueryable<BusinessEntityViewHistory> BusinessEntityViewHistories 
		{
			get
			{
				return this.GetAll<BusinessEntityViewHistory>();
			}
		}
		
		public IQueryable<BusinessCategory> BusinessCategories 
		{
			get
			{
				return this.GetAll<BusinessCategory>();
			}
		}
		
		public IQueryable<BannerAd> BannerAds 
		{
			get
			{
				return this.GetAll<BannerAd>();
			}
		}
		
		public IQueryable<Event> Events 
		{
			get
			{
				return this.GetAll<Event>();
			}
		}
		
		public IQueryable<Calendar> Calendars 
		{
			get
			{
				return this.GetAll<Calendar>();
			}
		}
		
		public IQueryable<ClassifiedImage> ClassifiedImages 
		{
			get
			{
				return this.GetAll<ClassifiedImage>();
			}
		}
		
		public IQueryable<ClassifiedComment> ClassifiedComments 
		{
			get
			{
				return this.GetAll<ClassifiedComment>();
			}
		}
		
		public IQueryable<ClassifiedCategory> ClassifiedCategories 
		{
			get
			{
				return this.GetAll<ClassifiedCategory>();
			}
		}
		
		public IQueryable<ClassifiedAd> ClassifiedAds 
		{
			get
			{
				return this.GetAll<ClassifiedAd>();
			}
		}
		
		public IQueryable<Ref_province> Ref_provinces 
		{
			get
			{
				return this.GetAll<Ref_province>();
			}
		}
		
		public IQueryable<Ref_postalcode> Ref_postalcodes 
		{
			get
			{
				return this.GetAll<Ref_postalcode>();
			}
		}
		
		public IQueryable<Ref_country> Ref_countries 
		{
			get
			{
				return this.GetAll<Ref_country>();
			}
		}
		
		public IQueryable<Ref_city> Ref_cities 
		{
			get
			{
				return this.GetAll<Ref_city>();
			}
		}
		
		public IQueryable<VirtualCategoryLink> VirtualCategoryLinks 
		{
			get
			{
				return this.GetAll<VirtualCategoryLink>();
			}
		}
		
		public IQueryable<PageTemplate> PageTemplates 
		{
			get
			{
				return this.GetAll<PageTemplate>();
			}
		}
		
		public IQueryable<UDFDataType> UDFDataTypes 
		{
			get
			{
				return this.GetAll<UDFDataType>();
			}
		}
		
		public IQueryable<UDFAttachment> UDFAttachments 
		{
			get
			{
				return this.GetAll<UDFAttachment>();
			}
		}
		
		public IQueryable<UDFInfo> UDFInfos 
		{
			get
			{
				return this.GetAll<UDFInfo>();
			}
		}
		
		public IQueryable<UDFReference> UDFReferences 
		{
			get
			{
				return this.GetAll<UDFReference>();
			}
		}
		
		public IQueryable<UDFValue> UDFValues 
		{
			get
			{
				return this.GetAll<UDFValue>();
			}
		}
		
		public IQueryable<MasterPageConfig> MasterPageConfigs 
		{
			get
			{
				return this.GetAll<MasterPageConfig>();
			}
		}
		
		public IQueryable<CustomPage> CustomPages 
		{
			get
			{
				return this.GetAll<CustomPage>();
			}
		}
		
		public IQueryable<StyleSheet> StyleSheets 
		{
			get
			{
				return this.GetAll<StyleSheet>();
			}
		}
		
		public IQueryable<EmailEvent> EmailEvents 
		{
			get
			{
				return this.GetAll<EmailEvent>();
			}
		}
		
		public IQueryable<EmailHistory> EmailHistories 
		{
			get
			{
				return this.GetAll<EmailHistory>();
			}
		}
		
		public IQueryable<EmailAction> EmailActions 
		{
			get
			{
				return this.GetAll<EmailAction>();
			}
		}
		
		public IQueryable<EmailPlaceholder> EmailPlaceholders 
		{
			get
			{
				return this.GetAll<EmailPlaceholder>();
			}
		}
		
		public IQueryable<RelatedArticle> RelatedArticles 
		{
			get
			{
				return this.GetAll<RelatedArticle>();
			}
		}
		
		public IQueryable<MasterPageLinks> MasterPageLinks 
		{
			get
			{
				return this.GetAll<MasterPageLinks>();
			}
		}
		
		public IQueryable<EPM_vw_user_info> EPM_vw_user_infos 
		{
			get
			{
				return this.GetAll<EPM_vw_user_info>();
			}
		}
		
		public IQueryable<ArticleTag> ArticleTags 
		{
			get
			{
				return this.GetAll<ArticleTag>();
			}
		}
		
		public IQueryable<ThumbnailType> ThumbnailTypes 
		{
			get
			{
				return this.GetAll<ThumbnailType>();
			}
		}
		
		public IQueryable<ArticleThumbnail> ArticleThumbnails 
		{
			get
			{
				return this.GetAll<ArticleThumbnail>();
			}
		}
		
		public IQueryable<BusinessEntityRequest> BusinessEntityRequests 
		{
			get
			{
				return this.GetAll<BusinessEntityRequest>();
			}
		}
		
		public IQueryable<BusinessEntityThumbnail> BusinessEntityThumbnails 
		{
			get
			{
				return this.GetAll<BusinessEntityThumbnail>();
			}
		}
		
		public IQueryable<BusinessEntity> BusinessEntities 
		{
			get
			{
				return this.GetAll<BusinessEntity>();
			}
		}
		
		public IQueryable<BusinessEntityNote> BusinessEntityNotes 
		{
			get
			{
				return this.GetAll<BusinessEntityNote>();
			}
		}
		
		public IQueryable<BusinessEntityLetterClassification> BusinessEntityLetterClassifications 
		{
			get
			{
				return this.GetAll<BusinessEntityLetterClassification>();
			}
		}
		
		public IQueryable<BusinessEntityImage> BusinessEntityImages 
		{
			get
			{
				return this.GetAll<BusinessEntityImage>();
			}
		}
		
		public IQueryable<BusinessEntityConfig> BusinessEntityConfigs 
		{
			get
			{
				return this.GetAll<BusinessEntityConfig>();
			}
		}
		
		public IQueryable<UDFGroup> UDFGroups 
		{
			get
			{
				return this.GetAll<UDFGroup>();
			}
		}
		
		public IQueryable<UDFAssignment> UDFAssignments 
		{
			get
			{
				return this.GetAll<UDFAssignment>();
			}
		}
		
		public IQueryable<UserLink> UserLinks 
		{
			get
			{
				return this.GetAll<UserLink>();
			}
		}
		
		public IQueryable<ClassifiedTag> ClassifiedTags 
		{
			get
			{
				return this.GetAll<ClassifiedTag>();
			}
		}
		
		public IQueryable<Popup> Popups 
		{
			get
			{
				return this.GetAll<Popup>();
			}
		}
		
		public IQueryable<AdBanner> AdBanners 
		{
			get
			{
				return this.GetAll<AdBanner>();
			}
		}
		
		public IQueryable<AdExpose> AdExposes 
		{
			get
			{
				return this.GetAll<AdExpose>();
			}
		}
		
		public IQueryable<AdZone> AdZones 
		{
			get
			{
				return this.GetAll<AdZone>();
			}
		}
		
		public IQueryable<AdMediaType> AdMediaTypes 
		{
			get
			{
				return this.GetAll<AdMediaType>();
			}
		}
		
		public IQueryable<AdZoneMember> AdZoneMembers 
		{
			get
			{
				return this.GetAll<AdZoneMember>();
			}
		}
		
		public IQueryable<AdRefSize> AdRefSizes 
		{
			get
			{
				return this.GetAll<AdRefSize>();
			}
		}
		
		public IQueryable<AdZoneActionType> AdZoneActionTypes 
		{
			get
			{
				return this.GetAll<AdZoneActionType>();
			}
		}
		
		public IQueryable<Form> Forms 
		{
			get
			{
				return this.GetAll<Form>();
			}
		}
		
		public IQueryable<FormEmail> FormEmails 
		{
			get
			{
				return this.GetAll<FormEmail>();
			}
		}
		
		public IQueryable<EPM_vw_comment> EPM_vw_comments 
		{
			get
			{
				return this.GetAll<EPM_vw_comment>();
			}
		}
		
		public IEnumerable<Article> SP_Article_FullText(string keywords)
		{
			OAParameter parameterKeywords = new OAParameter();
			parameterKeywords.ParameterName = "keywords";
			parameterKeywords.Size = 4000;
			if(keywords != null)
			{
				parameterKeywords.Value = keywords;
			}	
			else
			{
				parameterKeywords.DbType = DbType.String;
				parameterKeywords.Value = DBNull.Value;
			}

			IEnumerable<Article> queryResult = this.ExecuteQuery<Article>("[SP_Article_FullText]", CommandType.StoredProcedure, parameterKeywords);
		
		
			return queryResult;
		}
		
		public IEnumerable<ForumThread> SP_Forum_FullText(string keywords)
		{
			OAParameter parameterKeywords = new OAParameter();
			parameterKeywords.ParameterName = "keywords";
			parameterKeywords.Size = 4000;
			if(keywords != null)
			{
				parameterKeywords.Value = keywords;
			}	
			else
			{
				parameterKeywords.DbType = DbType.String;
				parameterKeywords.Value = DBNull.Value;
			}

			IEnumerable<ForumThread> queryResult = this.ExecuteQuery<ForumThread>("[SP_Forum_FullText]", CommandType.StoredProcedure, parameterKeywords);
		
		
			return queryResult;
		}
		
		public IEnumerable<ClassifiedAd> SP_Classified_FullText(string keywords)
		{
			OAParameter parameterKeywords = new OAParameter();
			parameterKeywords.ParameterName = "keywords";
			parameterKeywords.Size = 4000;
			if(keywords != null)
			{
				parameterKeywords.Value = keywords;
			}	
			else
			{
				parameterKeywords.DbType = DbType.String;
				parameterKeywords.Value = DBNull.Value;
			}

			IEnumerable<ClassifiedAd> queryResult = this.ExecuteQuery<ClassifiedAd>("[SP_Classified_FullText]", CommandType.StoredProcedure, parameterKeywords);
		
		
			return queryResult;
		}
		
		public IEnumerable<GetTagCloudResultSet0> GetTagCloud(int? numDays)
		{
			OAParameter parameterNumDays = new OAParameter();
			parameterNumDays.ParameterName = "numDays";
			if(numDays.HasValue)
			{
				parameterNumDays.Value = numDays.Value;
			}
			else
			{
				parameterNumDays.DbType = DbType.Int32;
				parameterNumDays.Value = DBNull.Value;
			}

			IEnumerable<GetTagCloudResultSet0> queryResult = this.ExecuteQuery<GetTagCloudResultSet0>("[Article].[GetTagCloud]", CommandType.StoredProcedure, parameterNumDays);
		
		
			return queryResult;
		}
		
		public IEnumerable<BusinessEntity> SP_BusinessEntity_FullText(string keywords)
		{
			OAParameter parameterKeywords = new OAParameter();
			parameterKeywords.ParameterName = "keywords";
			parameterKeywords.Size = 4000;
			if(keywords != null)
			{
				parameterKeywords.Value = keywords;
			}	
			else
			{
				parameterKeywords.DbType = DbType.String;
				parameterKeywords.Value = DBNull.Value;
			}

			IEnumerable<BusinessEntity> queryResult = this.ExecuteQuery<BusinessEntity>("[SP_BusinessEntity_FullText]", CommandType.StoredProcedure, parameterKeywords);
		
		
			return queryResult;
		}
		
		public int EPM_sp_user_info_udf()
		{
			int queryResult = this.ExecuteNonQuery("[EPM_sp_user_info_udf]", CommandType.StoredProcedure);
		
		
			return queryResult;
		}
		
		public IEnumerable<Article> EPM_SP_Get_Related_Articles(int? articleID, bool? categoryArticleOnly)
		{
			int returnValue;
			return EPM_SP_Get_Related_Articles(articleID, categoryArticleOnly, out returnValue);
		}
		
		public IEnumerable<Article> EPM_SP_Get_Related_Articles(int? articleID, bool? categoryArticleOnly, out int returnValue)
		{
			OAParameter parameterReturnValue = new OAParameter();
		    parameterReturnValue.Direction = ParameterDirection.ReturnValue;
		    parameterReturnValue.ParameterName = "parameterReturnValue";
		
			OAParameter parameterArticleID = new OAParameter();
			parameterArticleID.ParameterName = "articleID";
			if(articleID.HasValue)
			{
				parameterArticleID.Value = articleID.Value;
			}
			else
			{
				parameterArticleID.DbType = DbType.Int32;
				parameterArticleID.Value = DBNull.Value;
			}

			OAParameter parameterCategoryArticleOnly = new OAParameter();
			parameterCategoryArticleOnly.ParameterName = "CategoryArticleOnly";
			if(categoryArticleOnly.HasValue)
			{
				parameterCategoryArticleOnly.Value = categoryArticleOnly.Value;
			}
			else
			{
				parameterCategoryArticleOnly.DbType = DbType.Boolean;
				parameterCategoryArticleOnly.Value = DBNull.Value;
			}

			IEnumerable<Article> queryResult = this.ExecuteQuery<Article>("[EPM_SP_Get_Related_Articles]", CommandType.StoredProcedure, parameterArticleID, parameterCategoryArticleOnly, parameterReturnValue);
		
			returnValue = parameterReturnValue.Value == DBNull.Value 
				? -1
				: (int)parameterReturnValue.Value;
		
			return queryResult;
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MsSql";
			backend.ProviderName = "System.Data.SqlClient";
			backend.Logging.LogEventsToTrace = false;
			backend.Logging.MetricStoreSnapshotInterval = 0;
			backend.Runtime.CacheReferenceType = CacheReferenceType.Strong;
			backend.Runtime.CommandTimeout = 100;
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of EPMEntityModel.
		/// </summary>
		/// <param name="config">The BackendConfiguration of EPMEntityModel.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IEPMEntityModelUnitOfWork : IUnitOfWork
	{
		IQueryable<Article> Articles
		{
			get;
		}
		IQueryable<ArticleComment> ArticleComments
		{
			get;
		}
		IQueryable<ArticleCategory> ArticleCategories
		{
			get;
		}
		IQueryable<SiteMenu> SiteMenus
		{
			get;
		}
		IQueryable<MainMenu> MainMenus
		{
			get;
		}
		IQueryable<ContentView> ContentViews
		{
			get;
		}
		IQueryable<ContentType> ContentTypes
		{
			get;
		}
		IQueryable<Widget_detail> Widget_details
		{
			get;
		}
		IQueryable<Widget> Widgets
		{
			get;
		}
		IQueryable<WidgetType> WidgetTypes
		{
			get;
		}
		IQueryable<Users> Users
		{
			get;
		}
		IQueryable<UserRoles> UserRoles
		{
			get;
		}
		IQueryable<UserProfile> UserProfiles
		{
			get;
		}
		IQueryable<UserMembership> UserMemberships
		{
			get;
		}
		IQueryable<Application> Applications
		{
			get;
		}
		IQueryable<UserRoleMembership> UserRoleMemberships
		{
			get;
		}
		IQueryable<AccessControlList> AccessControlLists
		{
			get;
		}
		IQueryable<ForumThread> ForumThreads
		{
			get;
		}
		IQueryable<Forum> Forums
		{
			get;
		}
		IQueryable<ForumAttachments> ForumAttachments
		{
			get;
		}
		IQueryable<ForumConfig> ForumConfigs
		{
			get;
		}
		IQueryable<ForumComment> ForumComments
		{
			get;
		}
		IQueryable<SiteSetting> SiteSettings
		{
			get;
		}
		IQueryable<SearchQuery> SearchQueries
		{
			get;
		}
		IQueryable<Subscription> Subscriptions
		{
			get;
		}
		IQueryable<DailyLogin> DailyLogins
		{
			get;
		}
		IQueryable<BusinessEntityViewHistory> BusinessEntityViewHistories
		{
			get;
		}
		IQueryable<BusinessCategory> BusinessCategories
		{
			get;
		}
		IQueryable<BannerAd> BannerAds
		{
			get;
		}
		IQueryable<Event> Events
		{
			get;
		}
		IQueryable<Calendar> Calendars
		{
			get;
		}
		IQueryable<ClassifiedImage> ClassifiedImages
		{
			get;
		}
		IQueryable<ClassifiedComment> ClassifiedComments
		{
			get;
		}
		IQueryable<ClassifiedCategory> ClassifiedCategories
		{
			get;
		}
		IQueryable<ClassifiedAd> ClassifiedAds
		{
			get;
		}
		IQueryable<Ref_province> Ref_provinces
		{
			get;
		}
		IQueryable<Ref_postalcode> Ref_postalcodes
		{
			get;
		}
		IQueryable<Ref_country> Ref_countries
		{
			get;
		}
		IQueryable<Ref_city> Ref_cities
		{
			get;
		}
		IQueryable<VirtualCategoryLink> VirtualCategoryLinks
		{
			get;
		}
		IQueryable<PageTemplate> PageTemplates
		{
			get;
		}
		IQueryable<UDFDataType> UDFDataTypes
		{
			get;
		}
		IQueryable<UDFAttachment> UDFAttachments
		{
			get;
		}
		IQueryable<UDFInfo> UDFInfos
		{
			get;
		}
		IQueryable<UDFReference> UDFReferences
		{
			get;
		}
		IQueryable<UDFValue> UDFValues
		{
			get;
		}
		IQueryable<MasterPageConfig> MasterPageConfigs
		{
			get;
		}
		IQueryable<CustomPage> CustomPages
		{
			get;
		}
		IQueryable<StyleSheet> StyleSheets
		{
			get;
		}
		IQueryable<EmailEvent> EmailEvents
		{
			get;
		}
		IQueryable<EmailHistory> EmailHistories
		{
			get;
		}
		IQueryable<EmailAction> EmailActions
		{
			get;
		}
		IQueryable<EmailPlaceholder> EmailPlaceholders
		{
			get;
		}
		IQueryable<RelatedArticle> RelatedArticles
		{
			get;
		}
		IQueryable<MasterPageLinks> MasterPageLinks
		{
			get;
		}
		IQueryable<EPM_vw_user_info> EPM_vw_user_infos
		{
			get;
		}
		IQueryable<ArticleTag> ArticleTags
		{
			get;
		}
		IQueryable<ThumbnailType> ThumbnailTypes
		{
			get;
		}
		IQueryable<ArticleThumbnail> ArticleThumbnails
		{
			get;
		}
		IQueryable<BusinessEntityRequest> BusinessEntityRequests
		{
			get;
		}
		IQueryable<BusinessEntityThumbnail> BusinessEntityThumbnails
		{
			get;
		}
		IQueryable<BusinessEntity> BusinessEntities
		{
			get;
		}
		IQueryable<BusinessEntityNote> BusinessEntityNotes
		{
			get;
		}
		IQueryable<BusinessEntityLetterClassification> BusinessEntityLetterClassifications
		{
			get;
		}
		IQueryable<BusinessEntityImage> BusinessEntityImages
		{
			get;
		}
		IQueryable<BusinessEntityConfig> BusinessEntityConfigs
		{
			get;
		}
		IQueryable<UDFGroup> UDFGroups
		{
			get;
		}
		IQueryable<UDFAssignment> UDFAssignments
		{
			get;
		}
		IQueryable<UserLink> UserLinks
		{
			get;
		}
		IQueryable<ClassifiedTag> ClassifiedTags
		{
			get;
		}
		IQueryable<Popup> Popups
		{
			get;
		}
		IQueryable<AdBanner> AdBanners
		{
			get;
		}
		IQueryable<AdExpose> AdExposes
		{
			get;
		}
		IQueryable<AdZone> AdZones
		{
			get;
		}
		IQueryable<AdMediaType> AdMediaTypes
		{
			get;
		}
		IQueryable<AdZoneMember> AdZoneMembers
		{
			get;
		}
		IQueryable<AdRefSize> AdRefSizes
		{
			get;
		}
		IQueryable<AdZoneActionType> AdZoneActionTypes
		{
			get;
		}
		IQueryable<Form> Forms
		{
			get;
		}
		IQueryable<FormEmail> FormEmails
		{
			get;
		}
		IQueryable<EPM_vw_comment> EPM_vw_comments
		{
			get;
		}
		IEnumerable<Article> SP_Article_FullText(string keywords);
		IEnumerable<ForumThread> SP_Forum_FullText(string keywords);
		IEnumerable<ClassifiedAd> SP_Classified_FullText(string keywords);
		IEnumerable<GetTagCloudResultSet0> GetTagCloud(int? numDays);
		IEnumerable<BusinessEntity> SP_BusinessEntity_FullText(string keywords);
		int EPM_sp_user_info_udf();
		IEnumerable<Article> EPM_SP_Get_Related_Articles(int? articleID, bool? categoryArticleOnly);
		IEnumerable<Article> EPM_SP_Get_Related_Articles(int? articleID, bool? categoryArticleOnly, out int returnValue);
	}
}
#pragma warning restore 1591
